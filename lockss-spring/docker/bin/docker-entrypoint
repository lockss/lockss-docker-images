#!/bin/sh

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

_0="$(basename "${0}")"
_D0=$(dirname "${0}")

. "${_D0}/shrotlog"

JVM_OPTS_DOCKER='-XX:+StartAttachListener -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport'
JVM_OPTS_LOGGING='-Dorg.lockss.defaultLogLevel=debug -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dorg.springframework.boot.logging.LoggingSystem=none'
JVM_OPTS_OPENS="--add-opens java.base/java.util=ALL-UNNAMED"
JVM_OPTS_TMP="-Djava.io.tmpdir=${LOCKSS_TMP}"
LOCKSS_TMP_TRASH="${LOCKSS_TMP}/../lockss-trash"
LOCKSS_JAR="${LOCKSS_HOME}/lib/lockss.jar"
STARTUP_FILE="${LOCKSS_PIDS}/${_0}.startup"
PID_FILE="${LOCKSS_PIDS}/${_0}.pid"
#SUPPRESS_STD_REDIR=1    # let the env set this.

# $1=exitcode
Exit()
{
  rm -f "${STARTUP_FILE}"
  exit "${1}"
}

Apply_Config()
{
  echo "Applying config from ${1}..."
  if [ -d "${1}" ]; then
    : \
    && TMP=$(mktemp -d) \
    && cd "${TMP}" \
    && ( cd "${1}" && tar cf - . ) | tar xf - \
    && for f in $(find . -type f -name '*.tpl'); do
         DOLLAR='$' envsubst < "${f}" > "$(dirname "${f}")/$(basename "${f}" '.tpl')"
       done \
    && cd "${LOCKSS_HOME}/etc" \
    && ( cd "${TMP}" && tar cf - --exclude '*.tpl' . ) | tar xf -
    RET=$?
    rm -rf "${TMP}"
    echo "Done applying config from ${1}."
    return $RET
  else
    echo "No config directory ${1}."
    return 0
  fi
}

# Checks that $1 is -e, -d, -r and -w
Check_Dir()
{
  Check_Dir_Read "${1}"
  if [ ! -w "${1}" ]; then
    echo "${_0}: directory not writeable: ${1}"
    Exit 1
  fi
}

# Checks that $1 is -e, -d and -r
Check_Dir_Read()
{
  if [ ! -e "${1}" ]; then
    echo "${_0}: directory not found: ${1}"
    Exit 1
  fi
  if [ ! -d "${1}" ]; then
    echo "${_0}: not a directory: ${1}"
    Exit 1
  fi
  if [ ! -r "${1}" ]; then
    echo "${_0}: directory not readable: ${1}"
    Exit 1
  fi

}

Check_Executable()
{
  if ! which "${1}" > /dev/null 2>&1 ; then
    echo "${_0}: PATH executable not found: ${1}"
    Exit 1
  fi
}

Check_File()
{
  if [ ! -e "${1}" ]; then
    echo "${_0}: file not found: ${1}"
    Exit 1
  fi
  if [ ! -f "${1}" ]; then
    echo "${_0}: not a file: ${1}"
    Exit 1
  fi
  if [ ! -r "${1}" ]; then
    echo "${_0}: file not readable: ${1}"
    Exit 1
  fi
}

Check_Set()
{
  if [ -z "${1}" ]; then
    echo "${_0}: environment variable not set: ${2}"
    Exit 1
  fi
}

Temp_Dir_Cleanup()
{
  echo "Temporary directory cleanup..."
  mkdir -p "${LOCKSS_TMP_TRASH}"
  TRASH="$(mktemp -d -p "${LOCKSS_TMP_TRASH}")"
  mv "${LOCKSS_TMP}" "${TRASH}"
  mkdir -p "${LOCKSS_TMP}"
  ( cd "${LOCKSS_TMP_TRASH}" && rm -rf ./* ) &
}

# $1=input
Url_Encode()
{
  echo -n "${1}" | awk '
    BEGIN {
      for (i = 0 ; i < 256 ; ++i) {
        ord[sprintf("%c", i)] = i
      }
    }
    {
      for (i = 1 ; i <= length($0) ; i++) {
        c = substr($0, i, 1) ;
        printf("%s", (c ~ /[-._~a-zA-Z0-9]/) ? c : sprintf("%%%02X", ord[c]))
      }
    }
  '
}

# $1=space separated string of host:port pairs
Wait_For_Port()
{
  echo "Starting wait for port on: $@"
  for hostport in $@ ; do
    echo "Waiting for port on ${hostport}..."
    host="${hostport%%:*}"
    port="${hostport#*:}"
    until nc -z -w "${LOCKSS_WAIT_FOR_PORT_TIMEOUT}" "${host}" "${port}" ; do
      sleep "${LOCKSS_WAIT_FOR_PORT_SLEEP}"
    done
    echo "Done waiting for port on ${hostport}."
  done
  echo "Done waiting for ports."
}

# $1=space separated string of host:port pairs
Wait_For_200()
{
  echo "Starting wait for HTTP 200 responses from: $@"
  for hostport in $@ ; do
    url="http://${hostport}/status"
    echo "Waiting for HTTP 200 response from ${url}..."
    until curl --silent --max-time "${LOCKSS_WAIT_FOR_200_TIMEOUT}" --location "${url}" ; do
      sleep "${LOCKSS_WAIT_FOR_200_SLEEP}"
    done
    echo "Done waiting for HTTP 200 response from ${url}."
  done
  echo "Done waiting for HTTP 200 responses."
}

Add_Timestamp() {
  # 09 Jul 21 20:38:26 PDT
  local fmt="%d %b %y %T %Z "
  awk -F"\n" "{print strftime(\"${fmt}\", systime()) \$0; fflush()}"
}

# $1=log filename
# redirect stdout/err to log file with timestamps
Redir_Std() {
  local file="$1"
  # Create named pipe, delete on exit
  local npipe=/tmp/$$.ptmp
  trap "rm -f $npipe" EXIT
  # This script always runs as process 1, don't rely on unique name
  rm -f $npipe
  mknod $npipe p
#  # Run timestamper and log rotater in background, reading from pipe,
#  # appending to log file
#  ( Add_Timestamp | Cat_And_Rotate -n 5 -s 1048576 -z "${file}" ) <${npipe}  &
  # Run timestamper in background, reading from pipe, appending to output file
  Add_Timestamp <$npipe >>"${file}" &
  # Close FD 1&2
  exec 1>&-
  exec 2>&-
  # Redirect FD 1&2 to pipe
  exec 1>$npipe
  exec 2>&1
}

# Beginning
# Make sure the user and group for lockss are defined
Check_Set "${LOCKSS_UID}" LOCKSS_UID
Check_Set "${LOCKSS_GID}" LOCKSS_GID

if [ "$(id -u)" != "${LOCKSS_UID}" ]; then
  echo "This script should be run as the LOCKSS user with ID ${LOCKSS_UID}"
  Exit 1
fi

# Sanity check for stdout/stderr logging

Check_Set "${LOCKSS_LOGS}" LOCKSS_LOGS
Check_Dir "${LOCKSS_LOGS}"

LOCKSS_LOGFILE="${LOCKSS_LOGS}/stdout.log"

# Redirect stdout and stderr to file

if [ -z "${SUPPRESS_STD_REDIR}" ]; then
  echo "$(date) Redirecting stdout and stderr to ${LOCKSS_LOGFILE}."
  Redir_Std "${LOCKSS_LOGFILE}"
fi

echo "$$" > "${STARTUP_FILE}"
rm -f "${PID_FILE}"

echo "*************** CONTAINER ENTRY POINT ***************"
echo "Beginning execution..."
echo "Maven coordinates: ${LABEL_MAVEN_GROUP}:${LABEL_MAVEN_ARTIFACT}:${LABEL_MAVEN_VERSION}"
echo "Environment:"
env | sort

# Sanity checks

echo "Sanity checks..."
Check_Executable 'awk'
Check_Executable 'curl'
Check_Executable 'date'
Check_Executable 'envsubst'
Check_Executable 'java'
Check_Executable 'nc'

Check_Set "${CONFIGS}"
Check_Dir_Read "${CONFIGS}"

Check_Set "${LOCKSS_DATA}" LOCKSS_DATA
Check_Dir "${LOCKSS_DATA}"
Check_Set "${LOCKSS_PIDS}" LOCKSS_PIDS
Check_Dir_Read "${LOCKSS_PIDS}"

Check_Set "${LOCKSS_HOME}" LOCKSS_HOME
Check_Dir_Read "${LOCKSS_HOME}"
Check_Dir "${LOCKSS_HOME}/etc"
Check_Set "${LOCKSS_JAR}" LOCKSS_JAR
Check_File "${LOCKSS_JAR}"

Check_Set "${LOCKSS_TMP}" LOCKSS_TMP

# Layer configuration

echo "Layering configuration..."
mkdir -p "${LOCKSS_HOME}/etc"
Apply_Config "${LOCKSS_HOME}/etc.base"
echo "Done layering configuration."

# Relevant for all services
ARGS_BOOTSTRAP=''
ARGS_CLUSTER=''
ARGS_USER_CONFIG_SECTION=''
ARGS_SERVICE=''
ARGS_GROUP=''

# Service-specific
JVM_OPTS_THIS_SERVICE=''
ARGS_THIS_SERVICE=''

if [ "${LOCKSS_IS_REPO}" = 'true' ]; then
  if [ "${USE_SOLR_INDEX}" = 'true' ]; then
    Check_File "${SECRETS}/solr-auth"
  fi

  #
  # LOCKSS_IS_REPO
  #
  echo "Repository service configuration..."
  ARGS_THIS_SERVICE="--spring.config.location=classpath:/application.properties,file:${CONFIGS}/lockss.properties -s solr:${SECRETS}/solr-auth"

fi

if [ "${LOCKSS_IS_POLLER}" = 'true' ]; then

  #
  # LOCKSS_IS_POLLER
  #
  echo "Poller service configuration..."
  ARGS_THIS_SERVICE="-s lcapssl:${SECRETS}/lcap-ssl-pass"
fi

  # (left indented for now to clarify diffs)

  #
  # All services
  #

  # Bootstrap configuration

  echo "Bootstrap configuration..."
  Check_File "${CONFIGS}/lockss_bootstrap"
  ARGS_BOOTSTRAP="-b resource:application.properties -b ${LOCKSS_HOME}/etc/lockss_bootstrap_base -b ${CONFIGS}/lockss_bootstrap"

  # Cluster configuration
  if [ "${LOCKSS_NEEDS_SECRETS}" = 'true' ]; then
    Check_Set "${LOCKSS_ADMIN_USER}" LOCKSS_ADMIN_USER
    Check_Set "${SECRETS}"
    Check_Dir_Read "${SECRETS}"
    Check_File "${SECRETS}/lockss_ui_pass"
  fi

  echo "Cluster configuration..."
  if [ "${LOCKSS_IS_CONFIG}" = 'true' ]; then
    #
    # LOCKSS_IS_CONFIG
    #
    Check_Set "${LOCKSS_PROPS_URL}" LOCKSS_PROPS_URL
    Check_File "${CONFIGS}/lockss_cluster"
    ARGS_CLUSTER="-l ${LOCKSS_PROPS_URL} -l ${CONFIGS}/lockss_cluster -l ${CONFIGS}/lockss_cluster_opt"
  else
    #
    # !LOCKSS_IS_CONFIG
    #
    Check_Set "${LOCKSS_CONFIG_URL}" LOCKSS_CONFIG_URL

#    LOCKSS_CONFIG_URL="${LOCKSS_CONFIG_URL%%://*}://$(Url_Encode "${LOCKSS_ADMIN_USER}"):$(Url_Encode "$(cat "${SECRETS}/lockss_ui_pass")")@${LOCKSS_CONFIG_URL#*://}"
    ARGS_CLUSTER="-c ${LOCKSS_CONFIG_URL} -l ${LOCKSS_CONFIG_URL}/config/file/cluster"
    ARGS_USER_CONFIG_SECTION=" -l ${LOCKSS_CONFIG_URL}/config/file/user-config"
  fi

  # Service configuration

  echo "Service configuration..."
  Check_File "${CONFIGS}/lockss_service"
  Check_File "${SECRETS}/lockss-auth"
  ARGS_SERVICE="-p ${LOCKSS_HOME}/etc/lockss_service_base -p ${CONFIGS}/lockss_service -p ${CONFIGS}/lockss_service_opt -s rest:${SECRETS}/lockss-auth"
  # Group configuration
  echo "Group configuration..."
  if [ -n "${LOCKSS_PRESERVATION_GROUP}" ]; then
    ARGS_GROUP="-g ${LOCKSS_PRESERVATION_GROUP}"
  fi

# Sequencing

if [ -n "${LOCKSS_WAIT_FOR_PORT}" ]; then
  Wait_For_Port "${LOCKSS_WAIT_FOR_PORT}"
fi

if [ -n "${LOCKSS_WAIT_FOR_200}" ]; then
  Wait_For_200 "${LOCKSS_WAIT_FOR_200}"
fi

# Temp directory handling

# Now done in daemon
# Temp_Dir_Cleanup

# Log4j config

export LOG4J_LOCKSS_CONFIG="${LOCKSS_HOME}/etc/log4j2-lockss-container.xml"

# Launch service

echo "Launching service..."

cd "${LOCKSS_TMP}"
echo "Working directory: $(pwd)"

echo "Launch parameters:"
java -version
echo "JAVA_HOME=${JAVA_HOME}"
echo "JVM_OPTS_DOCKER=${JVM_OPTS_DOCKER}"
echo "JVM_OPTS_LOGGING=${JVM_OPTS_LOGGING}"
echo "JVM_OPTS_TMP=${JVM_OPTS_TMP}"
echo "JVM_OPTS_THIS_SERVICE=${JVM_OPTS_THIS_SERVICE}"
echo "JVM_OPTS_ADDITIONAL=${JVM_OPTS_ADDITIONAL}"
echo "ARGS_BOOTSTRAP=${ARGS_BOOTSTRAP}"
echo "ARGS_CLUSTER=${ARGS_CLUSTER}"
echo "ARGS_USER_CONFIG_SECTION=${ARGS_USER_CONFIG_SECTION}"
echo "ARGS_SERVICE=${ARGS_SERVICE}"
echo "ARGS_GROUP=${ARGS_GROUP}"
echo "ARGS_THIS_SERVICE=${ARGS_THIS_SERVICE}"
echo "ARGS_ADDITIONAL=${ARGS_ADDITIONAL}"

echo "*************** JVM INVOCATION ***************"
echo "$$" > "${PID_FILE}"
rm -f "${STARTUP_FILE}"
exec java ${JVM_OPTS_DOCKER} \
          ${JVM_OPTS_OPENS} \
          ${JVM_OPTS_LOGGING} \
          ${JVM_OPTS_TMP} \
          ${JVM_OPTS_THIS_SERVICE} \
          ${JVM_OPTS_ADDITIONAL} \
          -jar "${LOCKSS_JAR}" \
          ${JVM_OPTS_SERVICE_ID} \
          ${ARGS_BOOTSTRAP} \
          ${ARGS_CLUSTER} \
          ${ARGS_SERVICE} \
          ${ARGS_USER_CONFIG_SECTION} \
          ${ARGS_GROUP} \
          ${ARGS_THIS_SERVICE} \
          ${ARGS_ADDITIONAL}
