#!/bin/sh

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

_0="$(basename "${0}")"

Apply_Config()
{
  echo "$(date) Applying config from ${1}..."
  if [ -d "${1}" ]; then
    : \
    && TMP=$(mktemp -d) \
    && cd "${TMP}" \
    && ( cd "${1}" && tar cf - . ) | tar xf - \
    && for f in $(find . -type f -name '*.tpl'); do
         envsubst < "${f}" > "$(dirname "${f}")/$(basename "${f}" '.tpl')"
       done \
    && cd "${PYWB_HOME}" \
    && ( cd "${TMP}" && tar cf - --exclude '*.tpl' . ) | tar xf -
    RET=$?
    rm -rf "${TMP}"
    echo "$(date) Done applying config from ${1}."
    return $RET
  else
    echo "$(date) No config directory ${1}."
    return 0
  fi
}

Check_Dir()
{
  if [ ! -d "${1}" ]; then
    echo "${_0}: directory not found: ${1}"
    exit 1
  fi
}

Check_Executable()
{
  if ! which "${1}" > /dev/null 2>&1 ; then
    echo "${_0}: PATH executable not found: ${1}"
    exit 1
  fi
}

Check_File()
{
  if [ ! -f "${1}" ]; then
    echo "${_0}: file not found: ${1}"
    exit 1
  fi
}

Check_Set()
{
  if [ -z "${1}" ]; then
    echo "${_0}: environment variable not set: ${2}"
    exit 1
  fi
}

# $1=input
Url_Encode()
{
  echo -n "${1}" | awk '
    BEGIN {
      for (i = 0 ; i < 256 ; ++i) {
        ord[sprintf("%c", i)] = i
      }
    }
    {
      for (i = 1 ; i <= length($0) ; i++) {
        c = substr($0, i, 1) ;
        printf("%s", (c ~ /[-._~a-zA-Z0-9]/) ? c : sprintf("%%%02X", ord[c]))
      }
    }
  '
}

# $1=space separated string of host:port pairs
Wait_For_Port()
{
  echo "$(date) Starting wait for port on: $@"
  for hostport in $@ ; do
    echo "$(date) Waiting for port on ${hostport}..."
    host="${hostport%%:*}"
    port="${hostport#*:}"
    until nc -z -w "${LOCKSS_WAIT_FOR_PORT_TIMEOUT}" "${host}" "${port}" ; do
      sleep "${LOCKSS_WAIT_FOR_PORT_SLEEP}"
    done
    echo "$(date) Done waiting for port on ${hostport}."
  done
  echo "$(date) Done waiting for ports."
}

# $1=space separated string of host:port pairs
Wait_For_200()
{
  echo "$(date) Starting wait for HTTP 200 responses from: $@"
  for hostport in $@ ; do
    url="http://${hostport}/status"
    echo "$(date) Waiting for HTTP 200 response from ${url}..."
    until curl --silent --max-time "${LOCKSS_WAIT_FOR_200_TIMEOUT}" --location "${url}" ; do
      sleep "${LOCKSS_WAIT_FOR_200_SLEEP}"
    done
    echo "$(date) Done waiting for HTTP 200 response from ${url}."
  done
  echo "$(date) Done waiting for HTTP 200 responses."
}

# Sanity check for stdout/stderr logging

Check_Set "${LOCKSS_LOGS}" LOCKSS_LOGS
Check_Dir "${LOCKSS_LOGS}"

LOCKSS_LOGFILE="${LOCKSS_LOGS}/stdout.log"

# Redirect stdout and stderr to file

echo "$(date) Redirecting stdout and stderr to ${LOCKSS_LOGFILE}."
exec >> $LOCKSS_LOGFILE
exec 2>&1

# Begin container execution

echo "$(date) *************** CONTAINER ENTRY POINT ***************"
echo "$(date) Beginning execution..."
echo "$(date) Environment:"
env | sort

# Sanity checks

echo "$(date) Sanity checks..."

Check_Executable 'curl'
Check_Executable 'envsubst'
Check_Executable 'nc'

Check_Set "${PYWB_COLLECTION}" PYWB_COLLECTION
Check_Set "${PYWB_PORT}" PYWB_PORT

Check_Set "${REPO_HOST}" REPO_HOST
Check_Set "${REPO_REST_PORT}" REPO_REST_PORT

Check_Set "${INIT_COLLECTION}"
Check_Dir "${VOLUME_DIR}"

Check_Set "${SECRETS}" SECRETS
Check_File "${SECRETS}/lockss-auth"
export REPO_AUTH="$(Url_Encode "$(cut -d : -f 1 "${SECRETS}/lockss-auth")"):$(Url_Encode "$(cut -d : -f 2- "${SECRETS}/lockss-auth")")"

# Layer configuration

echo "$(date) Layering configuration..."
Apply_Config /usr/local/share/pywb/etc
echo "$(date) Done layering configuration."

echo "$(date) Copying configuration to ${VOLUME_DIR}..."
cp "${PYWB_HOME}/config.yaml" "${PYWB_HOME}/uwsgi.ini" "${VOLUME_DIR}"

# Sequencing

if [ -n "${LOCKSS_WAIT_FOR_PORT}" ]; then
  Wait_For_Port "${LOCKSS_WAIT_FOR_PORT}"
fi

if [ -n "${LOCKSS_WAIT_FOR_200}" ]; then
  Wait_For_200 "${LOCKSS_WAIT_FOR_200}"
fi

# Invoke (exec) the original webrecorder/pywb entrypoint; TODO: $@ ?
cd "${VOLUME_DIR}"
exec "${PYWB_HOME}/docker-entrypoint.sh" uwsgi /uwsgi/uwsgi.ini
